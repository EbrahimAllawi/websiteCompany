{"version":3,"sources":["Components/Note.jsx","Components/App.jsx","index.js"],"names":["Note","props","item","restProps","className","App","useState","isEditing","inputRef","useRef","inputValue","setInputValue","notes","setNotes","useEffect","current","focus","addTask","replace","length","newNotesArray","console","log","onClick","ref","type","value","onChange","event","target","onKeyPress","e","key","map","index","notesArray","splice","deleteTask","ReactDOM","render","document","getElementById"],"mappings":"wLAeeA,EAbF,SAAAC,GACX,IAAQC,EAAuBD,EAAvBC,KAASC,EAAjB,YAA+BF,EAA/B,UAEA,OACE,qCACE,wCACA,+CAASE,GAAT,IAAoBC,UAAU,OAA9B,SACGF,GAAQ,UCiEFG,EAtEH,WACV,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KACMC,GADN,KACiBC,oBACjB,EAAoCH,mBAAS,IAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAA0BL,mBAAS,IAAnC,mBAAOM,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRN,EAASO,QAAQC,UAChB,CAACT,IAEJ,IAUMU,EAAU,WACd,GAAKP,EAAWQ,QAAQ,KAAM,IAAIC,OAAlC,CAIA,IAAMC,EAAa,sBAAOR,GAAP,CAAcF,IACjCG,EAASO,GAETT,EAAc,IACdU,QAAQC,IAAI,QAAQV,GACpBS,QAAQC,IAAI,gBAAgBF,GAC5BC,QAAQC,IAAI,WASd,OACE,qCACE,qBAAKlB,UAAU,SAAf,8CACA,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,MAAMmB,QAASN,EAA9B,eAGA,uBACEO,IAAKhB,EACLiB,KAAK,OACLrB,UAAU,YACVsB,MAAOhB,EACPiB,SA1Ce,SAAAC,GACrBjB,EAAciB,EAAMC,OAAOH,QA0CrBI,WAvCe,SAAAC,GACP,UAAVA,EAAEC,KACJf,OAuCGL,EAAMqB,KAAI,SAAC/B,EAAMgC,GAEd,OACA,cAAC,EAAD,CACEhC,KAAMA,EACNqB,QAAS,kBA1BF,SAAAW,GACjB,IAAMC,EAAU,YAAOvB,GACvBuB,EAAWC,OAAOF,EAAO,GACzBrB,EAASsB,GAuBgBE,CAAWH,KAF5B,cAGcA,cC7D1BI,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.db5f7f0c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = props => {\n  const { item, ...restProps } = props;\n\n  return (\n    <>\n      <div>added</div>\n      <div {...restProps} className=\"note\">\n        {item || \"\"}\n      </div>\n    </>\n  );\n};\n\nexport default Note;\n","import React, { useState, useEffect, useRef } from \"react\";\n// import \"../SCSS/App.scss\";\nimport Note from \"./Note\";\n// \nconst App = () => {\n  const [isEditing, setEditing] = useState(false);\n  const inputRef = useRef();\n  const [inputValue, setInputValue] = useState(\"\");\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, [isEditing]);\n\n  const updateNoteText = event => {\n    setInputValue(event.target.value);\n  };\n\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      addTask();\n    }\n  };\n\n  const addTask = () => {\n    if (!inputValue.replace(/\\s/, \"\").length) {\n      return;\n    }\n\n    const newNotesArray = [...notes, inputValue];\n    setNotes(newNotesArray)\n\n    setInputValue(\"\");\n    console.log('notes',notes)\n    console.log('newNotesArray',newNotesArray)\n    console.log('=====')\n  };\n\n  const deleteTask = index => {\n    const notesArray = [...notes];\n    notesArray.splice(index, 1);\n    setNotes(notesArray);\n  };\n\n  return (\n    <>\n      <div className=\"header\">React Hooks - TODO List Tutorial</div>\n      <div className=\"container\">\n        <div className=\"btn\" onClick={addTask}>\n          +\n        </div>\n        <input\n          ref={inputRef}\n          type=\"text\"\n          className=\"textInput\"\n          value={inputValue}\n          onChange={updateNoteText}\n          onKeyPress={handleKeyPress}\n        />\n        {notes.map((item, index) => {\n          // console.log(item)\n            return (\n            <Note\n              item={item}\n              onClick={() => deleteTask(index)}\n              key={`task${index}`}\n            />\n          )\n        } )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}