{"version":3,"sources":["css/service.module.scss","css/nav.module.scss","css/app.module.scss","Components/Navbar.tsx","img/websites-design.jpg","Components/Service.tsx","Components/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.js"],"names":["module","exports","Header","Layout","Content","Footer","Navbar","menuNav","Item","type","offsetTop","className","nav","logo","overlay","align","Card","Meta","Service","props","useEffect","id","descripeServices","document","getElementById","contentDescripeServices","newHtml","firstLetter","innerText","split","console","log","forEach","word","substring","service","innerHTML","changeStyleFirstLetter","nameService","style","height","src","websitesD","imgService","describe","App","app","container","backToTop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,yBAAyB,YAAc,6BAA6B,YAAc,6BAA6B,WAAa,8B,mBCArLD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,MAAQ,qB,mBCA1ED,EAAOC,QAAU,CAAC,UAAY,uBAAuB,UAAY,yB,4KCSzDC,EAA4BC,IAA5BD,OAA4BC,IAApBC,QAAoBD,IAAXE,OACV,SAASC,IACvB,IAAMC,EACL,cAAC,IAAD,UACC,eAAC,IAAKC,KAAN,WACE,IACD,eAAC,IAAD,CAAQC,KAAK,OAAb,UACC,sCAAa,OACJ,SAIb,OACC,mCACC,cAAC,IAAD,CAAOC,UAAW,EAAlB,SACC,eAACR,EAAD,CAAQS,UAAWC,IAAIA,IAAvB,UACC,sBAAMD,UAAWC,IAAIC,KAArB,0BACA,cAAC,IAAD,CAAUC,QAASP,EAAnB,SACC,cAAC,IAAD,CAAgBI,UAAWC,IAAIG,iB,qBC5BtB,MAA0B,4C,gBCQ1BC,IAARC,KAqBQ,SAASC,EAAQC,GAI/B,OAHGC,qBAAU,YAlBd,SAAiCC,GAC7B,IAAIC,EAAmBC,SAASC,eAAeH,GAC3CI,EAA0B,GAC1BC,EAAU,GAEVC,GADAF,GAA2BH,EAAkBM,WACPC,MAAM,KAChDC,QAAQC,IAAIJ,GACZA,EAAYK,SAAQ,SAAAC,GAChBH,QAAQC,IAAIE,EAAKC,UAAU,IAC3BR,GAAO,iCACQS,IAAQR,YADhB,cACiCM,EAAK,GADtC,kBACkDA,EAAKC,UAAU,GADjE,iBAIXJ,QAAQC,IAAIL,GACZJ,EAAkBc,UAAYV,EAK1BW,CAAuB,mBACxB,IAEL,qCACA,qBAAK1B,UAAWwB,IAAQG,YAAxB,SAAsCnB,EAAMmB,cACtC,sBAAK3B,UAAWwB,IAAQA,QAAxB,UACI,cAAC,IAAD,CAAOI,MAAO,CAACC,OAAQ,QAASC,IAAKC,EAAW/B,UAAWwB,IAAQQ,aACnE,qBAAKtB,GAAG,gBAAgBV,UAAWwB,IAAQS,SAA3C,iOCPGC,MAnBf,WACC,OACC,qCACC,cAACvC,EAAD,IAEA,sBAAKK,UAAWmC,IAAIC,UAApB,UACC,cAAC7B,EAAD,CAASoB,YAAY,mBACrB,cAACpB,EAAD,CAASoB,YAAY,2BAGtB,cAAC,IAAD,UACC,qBAAK3B,UAAWmC,IAAIE,UAApB,SACC,cAAC,IAAD,YCZCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BtC,QAAQC,IACN,+GAKE0B,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBhC,QAAQC,IAAI,sCAGR0B,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAACC,GACN1C,QAAQ0C,MAAM,4CAA6CA,MCjGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAO,cAAC,EAAD,IAAS3D,SAASC,eAAe,SFiB1C,SAAkBiC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyB,IAAIC,kBAAwBjC,OAAOC,SAASiC,MACpDC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOoC,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM4B,kBAAN,sBAEPnC,IAgEV,SAAiCO,EAAeC,GAE9C+B,MAAMhC,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5B5B,MAAK,SAAC6B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAMlC,MAAK,SAACC,GAClCA,EAAakC,aAAanC,MAAK,WAC7BV,OAAOC,SAAS6C,eAKpB1C,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLzC,QAAQC,IAAI,oEAtFVmE,CAAwB1C,EAAOC,GAI/BC,UAAUC,cAAcoC,MAAMlC,MAAK,WACjC/B,QAAQC,IACN,+GAMJwB,EAAgBC,EAAOC,OExC/B0C,GAKA1B,M","file":"static/js/main.a6301514.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"service_card__1naIA\",\"service\":\"service_service__1HK2B\",\"nameService\":\"service_nameService__1klTL\",\"firstLetter\":\"service_firstLetter__1oIwt\",\"imgService\":\"service_imgService__1aI_F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__1VDkO\",\"logo\":\"nav_logo__2s5Bv\",\"align\":\"nav_align__3Uamj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2QW_t\",\"backToTop\":\"app_backToTop__2HxbD\"};","import React from \"react\";\r\n// import icon from '../icon/align.ico'\r\n\r\nimport { BarsOutlined, LeftCircleTwoTone } from \"@ant-design/icons\";\r\n\r\nimport nav from \"../css/nav.module.scss\";\r\nimport { FaAlignJustify } from \"react-icons/fa\";\r\n\r\nimport { Button, Layout, Dropdown, Menu, Affix } from \"antd\";\r\n\r\nconst { Header, Content, Footer } = Layout;\r\nexport default function Navbar() {\r\n\tconst menuNav = (\r\n\t\t<Menu>\r\n\t\t\t<Menu.Item>\r\n\t\t\t\t{\" \"}\r\n\t\t\t\t<Button type=\"link\">\r\n\t\t\t\t\t<a>about</a>{\" \"}\r\n\t\t\t\t</Button>{\" \"}\r\n\t\t\t</Menu.Item>\r\n\t\t</Menu>\r\n\t);\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Affix offsetTop={0}>\r\n\t\t\t\t<Header className={nav.nav}>\r\n\t\t\t\t\t<span className={nav.logo}>Company Name</span>\r\n\t\t\t\t\t<Dropdown overlay={menuNav}>\r\n\t\t\t\t\t\t<FaAlignJustify className={nav.align} />\r\n\t\t\t\t\t</Dropdown>\r\n\t\t\t\t</Header>\r\n\t\t\t</Affix>\r\n\t\t</>\r\n\t);\r\n}\r\n","export default __webpack_public_path__ + \"static/media/websites-design.a9b050eb.jpg\";","import React, { useEffect } from \"react\";\r\nimport service from \"../css/service.module.scss\";\r\nimport websitesD from '../img/websites-design.jpg'\r\n\r\nimport {\r\n    Card,\r\n    Image\r\n} from 'antd'\r\nconst {Meta} = Card\r\ninterface IService {\r\n    nameService: string\r\n}\r\nfunction changeStyleFirstLetter (id:string) {\r\n    var descripeServices = document.getElementById(id)\r\n    var contentDescripeServices = ''\r\n    var newHtml = \"\"\r\n        contentDescripeServices += descripeServices!.innerText\r\n    var firstLetter = contentDescripeServices.split(' ')\r\n    console.log(firstLetter)\r\n    firstLetter.forEach(word => {\r\n        console.log(word.substring(1))\r\n        newHtml += `\r\n        <span class=\"${service.firstLetter}\" >${word[0]}</span>${word.substring(1)}\r\n        `\r\n    });\r\n    console.log(newHtml)\r\n    descripeServices!.innerHTML = newHtml\r\n}\r\n\r\nexport default function Service(props: IService) {\r\n    useEffect(() => {\r\n        changeStyleFirstLetter('websiteDesign')\r\n    }, []);\r\n\treturn (\r\n\t\t<>\r\n\t\t<div className={service.nameService}>{props.nameService}</div>\r\n        <div className={service.service} >\r\n            <Image style={{height: '100%'}} src={websitesD} className={service.imgService }/>\r\n            <div id=\"websiteDesign\" className={service.describe}>\r\n                Design Your Website Using Modern Ui Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem animi numquam necessitatibus distinctio assumenda doloremque accusantium commodi vitae voluptatibus nihil?\r\n            </div>\r\n        </div>\r\n\t\t</>\r\n\t);\r\n}\r\n","import app from '../css/app.module.scss';\nimport { \n\tBackTop \n} from \"antd\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Service from './Service';\nimport { \n\tFaArrowCircleUp\n} from 'react-icons/fa';\n\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Navbar />\n\n\t\t\t<div className={app.container}>\n\t\t\t\t<Service nameService=\"Website Design\" />\n\t\t\t\t<Service nameService=\"Website Development\" />\n\t\t\t</div>\n\t\t\t\n\t\t\t<BackTop>\n\t\t\t\t<div className={app.backToTop}>\n\t\t\t\t\t<FaArrowCircleUp />\n\t\t\t\t</div>\n\t\t\t</BackTop>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport App from './Components/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}